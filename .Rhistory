lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
m19<-mapview(Guerrero,
col.regions = Paleta[as.integer(Guerrero@data[2])+1],
label=sprintf(paste("<img src=\"", views,
"19.png\" style=\"width:300px;height:300px;\">", sep=""))%>%
lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
m20<-mapview(Oaxaca,
col.regions = Paleta[as.integer(Oaxaca@data[2])+1],
label=sprintf(paste("<img src=\"", views,
"20.png\" style=\"width:300px;height:300px;\">", sep=""))%>%
lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
m21<-mapview(Tabasco,
col.regions = Paleta[as.integer(Tabasco@data[2])+1],
label=sprintf(paste("<img src=\"", views,
"21.png\" style=\"width:300px;height:300px;\">", sep=""))%>%
lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
m22<-mapview(Chiapas,
col.regions = Paleta[as.integer(Chiapas@data[2])+1],
label=sprintf(paste("<img src=\"", views,
"22.png\" style=\"width:300px;height:300px;\">", sep=""))%>%
lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
m23<-mapview(Sonora,
col.regions = Paleta[as.integer(Sonora@data[2])+1],
label=sprintf(paste("<img src=\"", views,
"23.png\" style=\"width:300px;height:300px;\">", sep=""))%>%
lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
m24<-mapview(Chihuahua,
col.regions = Paleta[as.integer(Chihuahua@data[2])+1],
label=sprintf(paste("<img src=\"", views,
"24.png\" style=\"width:300px;height:300px;\">", sep=""))%>%
lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
m25<-mapview(Coahuila,
col.regions = Paleta[as.integer(Coahuila@data[2])+1],
label=sprintf(paste("<img src=\"", views,
"25.png\" style=\"width:300px;height:300px;\">", sep=""))%>%
lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
m26<-mapview(Sinaloa,
col.regions = Paleta[as.integer(Sinaloa@data[2])+1],
label=sprintf(paste("<img src=\"", views,
"26.png\" style=\"width:300px;height:300px;\">", sep=""))%>%
lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
m27<-mapview(Durango,
col.regions = Paleta[as.integer(Durango@data[2])+1],
label=sprintf(paste("<img src=\"", views,
"27.png\" style=\"width:300px;height:300px;\">", sep=""))%>%
lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
m28<-mapview(Zacatecas,
col.regions = Paleta[as.integer(Zacatecas@data[2])+1],
label=sprintf(paste("<img src=\"", views,
"28.png\" style=\"width:300px;height:300px;\">", sep=""))%>%
lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
m29<-mapview(San_Luis_Potosi,
col.regions = Paleta[as.integer(San_Luis_Potosi@data[2])+1],
label=sprintf(paste("<img src=\"", views,
"29.png\" style=\"width:300px;height:300px;\">", sep=""))%>%
lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
m30<-mapview(Nuevo_Leon,
col.regions = Paleta[as.integer(Nuevo_Leon@data[2])+1],
label=sprintf(paste("<img src=\"", views,
"30.png\" style=\"width:300px;height:300px;\">", sep=""))%>%
lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
m31<-mapview(Tamaulipas,
col.regions = Paleta[as.integer(Tamaulipas@data[2])+1],
label=sprintf(paste("<img src=\"", views,
"31.png\" style=\"width:300px;height:300px;\">", sep=""))%>%
lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
m32<-mapview(Veracruz,
col.regions = Paleta[as.integer(Veracruz@data[2])+1],
label=sprintf(paste("<img src=\"", views,
"32.png\" style=\"width:300px;height:300px;\">", sep=""))%>%
lapply(HTML), alpha.regions = 0.5, legend=FALSE,
map.types="Esri.WorldImagery")
M<-m1+m2+m3+m4+m5+m6+m7+m8
M<-M+m9+m10+m11+m12+m13
M<-M+m14+m15+m16+m17+m18
M<-M+m19+m20+m21+m22+m23
M<-M+m24+m25+m26+m27+m28
M<-M+m29+m30+m31+m32
M<-M@map%>%#, map.types="Esri.WorldImagery"
#M<-M@map%>%#, map.types="Esri.WorldImagery"
addTimeline(
brew_gj
) %>%
htmlwidgets::onRender(sprintf(paste(
"
function(el,x) {
var colors = %s;
var map = this;
// get the timeline control
var timeline = map.layerManager._byCategory.timeline.getLayers()[1];
// use R leaflet layerManager to get Zone polygon layer group
var Zone = [", CodigoHTML ,"]
timeline.on('change', function() {
// figure out what time is current selected on timeline and select that color
var time_selected = this.time;
var idx = this.times.indexOf(time_selected);
// but when playing instead of stepping times will not match exactly so in this case we will
//   crudely bisect the array in a very inefficient way; easy to optimize if there is a need
if(idx === -1) {
this.times.forEach(function(d,i) {
d <= time_selected ? idx = (i+1) : idx = idx;
})
}
// A MANO
for(i=0; i<32; i++)
{
Zone[i].setStyle({fillColor: colors[i][idx-1]});
}
// could also send to Shiny here if helpful
})
}
", sep=""),
jsonlite::toJSON(ColorMatrix(Shape), auto_unbox=TRUE)
))
M<-M%>% addLegend("bottomleft",
labels= c(Cantidades),
colors =c(substr(Paleta[Cantidades],1,7)),
title= titleLegend,
opacity = 1)
return(M)
}
PrediccionDeDatos<-function(Data, l)#Data es la base y l los días a futuro
{
A=matrix(0,ncol = l-1, nrow = 32)
m=nrow(Data)
for (i in 1:m)
{
x=1:(n-11)
y1=as.numeric(Datos[i,2:(n-10)])+1
data=data.frame(x,y1, group="Observado")
mod1<-glm(y1~x, data=data, family = Gamma(link="log"))
x=1:(n-1)
y1=as.numeric(Datos[i,-1])+1
data=data.frame(x,y1, group="Observado")
newdata<-data.frame(x=70:(80+l), y1=exp(predict(mod1,
newdata = data.frame(x=70:(80+l)), interval="prediction")),
group="Estimado")
newdata=rbind(data, newdata)
colnames(newdata)=c("Días transcurridos","Contagiados","CantidadContagios")
PLOT<-ggplot(dat=newdata, aes(`Días transcurridos`,Contagiados, col=CantidadContagios))+
geom_point()+
geom_smooth(method="glm", method.args=list(family=Gamma(link = "log")),
fullrange=TRUE, level=0.99, col="red") +
xlim(1, (n+l))+theme(legend.position = c(0.4,0.7))
#Aquí exportar la imagen
ggsave(PLOT+ggtitle(Datos$Estado[i]),
filename = paste("img/confirmados/predicciones/", i,".png", sep=""),
bg="transparent", width = 3, height = 3)
A[i,]=t(newdata[172:(n+2*l),2])#172??? de donde salió??
}
NewData=cbind(Data, A)
}
#Función en construcción, al intentar empaquetar, no corre bien las comparaciones de MiPaleta
CreateMap<-function(BaseDatos, views, titleLegend, file, titleFile)
{
n=ncol(BaseDatos)
BaseDatos=BaseDatos[a,-n]
write.dbf(BaseDatos,"Mexico_States.dbf")
#Visualización del mapa
OGR<-readOGR(dsn = location, layer = "Mexico_States")
OGR@data=BaseDatos
n=ncol(BaseDatos)
Paleta=MiPaleta(as.vector(unlist(OGR@data[n])))
PerfilesPNG(BaseDatos, views)
MapaConfirmados=MapaDeContagios(OGR, views, titleLegend)
saveWidget(MapaConfirmados, file=file, selfcontained = F, title=titleFile)
}
### Confirmados
Confirmados=Confirmados[a,-ncol(Confirmados)]
write.dbf(Confirmados,"Mexico_States.dbf")
#Visualización del mapa
ConfirmadosOGR<-readOGR(dsn = location, layer = "Mexico_States")
ConfirmadosOGR@data=Confirmados
n=ncol(Confirmados)
Cantidades=c(100,1000,10000,40000)#Cantidades de la etiqueta
Paleta=MiPaleta(as.vector(unlist(ConfirmadosOGR@data[n])))
PerfilesPNG(Confirmados, "assets/img/confirmados/actuales/")
MapaConfirmados=MapaDeContagios(ConfirmadosOGR, "assets/img/confirmados/actuales/", "Contagios confirmados de COVID 19")
saveWidget(MapaConfirmados, file = "Confirmados.html", selfcontained = F, title="Confirmados")
#Para las demás variables se cambia la fecha inicial
PrimeraFechaRegistrada="2020-04-20"#Se suma 1
### Negativos
Negativos=Negativos[a,-ncol(Negativos)]
write.dbf(Negativos,"Mexico_States.dbf")
#Visualización del mapa
NegativosOGR<-readOGR(dsn = location, layer = "Mexico_States")
NegativosOGR@data=Negativos
n=ncol(Negativos)
Cantidades=c(100,1000,10000,40000)#Cantidades de la etiqueta
Paleta=MiPaleta(as.vector(unlist(NegativosOGR@data[n])))
PerfilesPNG(Negativos, "assets/img/negativos/actuales/")
MapaNegativos=MapaDeContagios(NegativosOGR, "assets/img/negativos/actuales/", "Negativos a contagio de COVID 19")
saveWidget(MapaNegativos, file = "Negativos.html", selfcontained = F, title="Negativos")
### Sospechosos
Sospechosos=Sospechosos[a,-ncol(Sospechosos)]
write.dbf(Sospechosos,"Mexico_States.dbf")
#Visualización del mapa
SospechososOGR<-readOGR(dsn = location, layer = "Mexico_States")
SospechososOGR@data=Sospechosos
n=ncol(Sospechosos)
Cantidades=c(100,1000,10000,40000)#Cantidades de la etiqueta
Paleta=MiPaleta(as.vector(unlist(SospechososOGR@data[n])))
PerfilesPNG(Sospechosos, "assets/img/sospechosos/actuales/")
MapaSospechosos=MapaDeContagios(SospechososOGR, "assets/img/sospechosos/actuales/", "Sospechosos de contagio de COVID 19")
saveWidget(MapaSospechosos, file = "Sospechosos.html", selfcontained = F, title="Sospechosos")
### Defunciones
Defunciones=Defunciones[a,-ncol(Defunciones)]
write.dbf(Defunciones,"Mexico_States.dbf")
#Visualización del mapa
DefuncionesOGR<-readOGR(dsn = location, layer = "Mexico_States")
DefuncionesOGR@data=Defunciones
n=ncol(Defunciones)
Paleta=MiPaleta(as.vector(unlist(DefuncionesOGR@data[n])))
PerfilesPNG(Defunciones, "assets/img/defunciones/actuales/")
MapaDefunciones=MapaDeContagios(DefuncionesOGR, "assets/img/defunciones/actuales/", "Defunciones por COVID 19")
saveWidget(MapaDefunciones, file = "Defunciones.html", selfcontained = F, title="Defunciones")
### Recuperados
Recuperados=Recuperados[a,-ncol(Recuperados)]
write.dbf(Recuperados,"Mexico_States.dbf")
#Visualización del mapa
RecuperadosOGR<-readOGR(dsn = location, layer = "Mexico_States")
RecuperadosOGR@data=Recuperados
n=ncol(Recuperados)
Paleta=MiPaleta(as.vector(unlist(RecuperadosOGR@data[n])))
PerfilesPNG(Recuperados, "assets/img/recuperados/actuales/")
MapaRecuperados=MapaDeContagios(RecuperadosOGR, "assets/img/recuperados/actuales/", "Recuperados de COVID 19")
saveWidget(MapaRecuperados, file = "Recuperados.html", selfcontained = F, title="Recuperados")
### Activos
Activos=Activos[a,-ncol(Activos)]
write.dbf(Activos,"Mexico_States.dbf")
#Visualización del mapa
ActivosOGR<-readOGR(dsn = location, layer = "Mexico_States")
ActivosOGR@data=Activos
n=ncol(Activos)
Paleta=MiPaleta(as.vector(unlist(ActivosOGR@data[n])))
PerfilesPNG(Activos, "assets/img/activos/actuales/")
MapaActivos=MapaDeContagios(ActivosOGR, "assets/img/activos/actuales/", "Contagios activos de COVID 19")
saveWidget(MapaActivos, file = "Activos.html", selfcontained = F, title="Activos")
Aux=read.csv("201005COVID19MEXICO.csv")
Actividad=as.Date(Aux$FECHA_ACTUALIZACION[1])-14
AuxConfirmados=Aux[which(Aux$RESULTADO==1),]
AuxNegativos=Aux[which(Aux$RESULTADO==2),]
AuxSospechosos=Aux[which(Aux$RESULTADO==3),]
AuxDefunciones=AuxConfirmados[which(AuxConfirmados$FECHA_DEF!="9999-99-99"),]
AuxRecuperados=AuxConfirmados[which(AuxConfirmados$TIPO_PACIENTE==1),]
AuxRecuperados=AuxRecuperados[which(AuxConfirmados$FECHA_DEF=="9999-99-99"),]
AuxRecuperados=AuxRecuperados[which(as.Date(AuxRecuperados$FECHA_SINTOMAS)<(Actividad+1)),]
AuxActivos=AuxConfirmados[which(as.Date(AuxRecuperados$FECHA_SINTOMAS)>Actividad),]
Aux=read.csv("201006COVID19MEXICO.csv")
Actividad=as.Date(Aux$FECHA_ACTUALIZACION[1])-14
AuxConfirmados=Aux[which(Aux$RESULTADO==1),]
AuxNegativos=Aux[which(Aux$RESULTADO==2),]
AuxSospechosos=Aux[which(Aux$RESULTADO==3),]
AuxDefunciones=AuxConfirmados[which(AuxConfirmados$FECHA_DEF!="9999-99-99"),]
AuxRecuperados=AuxConfirmados[which(AuxConfirmados$TIPO_PACIENTE==1),]
AuxRecuperados=AuxRecuperados[which(AuxConfirmados$FECHA_DEF=="9999-99-99"),]
AuxRecuperados=AuxRecuperados[which(as.Date(AuxRecuperados$FECHA_SINTOMAS)<(Actividad+1)),]
AuxActivos=AuxConfirmados[which(as.Date(AuxConfirmados$FECHA_SINTOMAS)>Actividad),]
AuxRecuperados=AuxConfirmados[which(AuxConfirmados$TIPO_PACIENTE==1),]
AuxRecuperados=AuxRecuperados[which(AuxRecuperados$FECHA_DEF=="9999-99-99"),]
AuxRecuperados=AuxRecuperados[which(as.Date(AuxRecuperados$FECHA_SINTOMAS)<(Actividad+1)),]
AuxConfirmados=Aux[which(Aux$RESULTADO==1),]
AuxNegativos=Aux[which(Aux$RESULTADO==2),]
AuxSospechosos=Aux[which(Aux$RESULTADO==3),]
library(foreign)#para DBF
library(rgdal)#Para Shp
location=getwd()
MatrizDatos=as.matrix(c(43,6,7,3,87,12,25,19,53,2,0,12), nrow=3)
MatrizDatos
Datos2000=read.csv("cgpv2000_iter_15.csv")
MatrizDatos=as.matrix(c(43,6,7,3,87,12,25,19,53,2,0,12), ncol=3)
MatrizDatos=as.data.frame(c(43,6,7,3,87,12,25,19,53,2,0,12), ncol=3)
Datos2000=read.csv("cgpv2000_iter_15.csv")
MatrizDatos=matrix(c(43,6,7,3,87,12,25,19,53,2,0,12), ncol=3)
MatrizDatos[2,3]
library(foreign)#para DBF
library(rgdal)#Para Shp
location=getwd()
location="/home/victor/Documentos/Carrera/Maestría/PaginaPersonal/VictorGarciaDS.github.io/"
setwd(location)
#Constantes
PrimeraFechaRegistrada="2020-03-17"#Se suma 1
UltimaFechaRegistrada="2020-11-07"
#  Descarga de datos
##  Los que ya estaban colapsados
url <- "https://github.com/ykidch/covid19_mex/archive/master.zip"
download.file(url, "covid19_mex-master.zip")
unzip("covid19_mex-master.zip")
#  Funciones
dates<-function(inicial,final)
{
while (as.double(inicial)<=as.double(final))
{
if(as.double(inicial)<10)#Forza fechas en caracteres completas
inicial=paste("0", as.double(inicial), sep = "")
month=substr(inicial, 4, 5)
#La siguiente condicional corrige un error de redondeo para octubre.
if(month==1)
{
month=10
inicial=paste(inicial, sep = "0", "")
}
urlAux<-paste(url, month, "/datos_abiertos_covid19_", inicial, ".2020.zip", sep = "")
destAux<-paste(inicial, ".2020.zip")
download.file(urlAux, destAux)
unzip(destAux)
inicial=as.character(as.double(inicial)+1)
}
}
downloader<-function(url, final)
{
dates("19.04", "30.04")
dates("01.05", "31.05")
dates("01.06", "30.06")
dates("01.07", "31.07")
dates("01.08", "31.08")
dates("01.09", "30.09")
dates("01.10", "31.10")
dates("01.11", final)
}
AjustaOrden<-function(DataFrame)
{
ValorAuxiliar=DataFrame[5,2]
DataFrame[5,2]=DataFrame[7,2]
DataFrame[7,2]=DataFrame[9,2]
DataFrame[9,2]=DataFrame[6,2]
DataFrame[6,2]=DataFrame[8,2]
DataFrame[8,2]=ValorAuxiliar
return(DataFrame)
}
url<-"http://datosabiertos.salud.gob.mx/gobmx/salud/datos_abiertos/historicos/"
FormatUlFecha=paste(substr(UltimaFechaRegistrada,9,10), substr(UltimaFechaRegistrada,6,7), sep=".")
downloader(url, FormatUlFecha)
#url<- "http://187.191.75.115/gobmx/salud/datos_abiertos/historicos/datos_abiertos_covid19_20.04.2020.zip"
#url<- "http://187.191.75.115/gobmx/salud/datos_abiertos/historicos/datos_abiertos_covid19_01.05.2020.zip"
# Combina en un solo DataFrame
paths=list.files(path="covid19_mex-master/data")
n=length(paths)
Confirmados=read.csv(paste("covid19_mex-master/data/", paths[1],"/positivos_",paths[1], ".csv", sep = ""))
for (i in 2:n)
Confirmados=merge(Confirmados, read.csv(paste("covid19_mex-master/data/", paths[i],"/positivos_",paths[i], ".csv", sep = "")))
Activos=Recuperados=Defunciones=Negativos=Sospechosos=Confirmados
m=length(list.files(pattern = "*.csv"))
for (i in 1:m)
{
Aux=read.csv(list.files(pattern = "*.csv")[i])
Actividad=as.Date(Aux$FECHA_ACTUALIZACION[1])-14
print(paste("Leyendo", Actividad+14))
AuxConfirmados=Aux[which(Aux$RESULTADO==1),]
AuxNegativos=Aux[which(Aux$RESULTADO==2),]
AuxSospechosos=Aux[which(Aux$RESULTADO==3),]
AuxDefunciones=AuxConfirmados[which(AuxConfirmados$FECHA_DEF!="9999-99-99"),]
AuxRecuperados=AuxConfirmados[which(AuxConfirmados$TIPO_PACIENTE==1),]
AuxRecuperados=AuxRecuperados[which(AuxRecuperados$FECHA_DEF=="9999-99-99"),]
AuxRecuperados=AuxRecuperados[which(as.Date(AuxRecuperados$FECHA_SINTOMAS)<(Actividad+1)),]
AuxActivos=AuxConfirmados[which(as.Date(AuxConfirmados$FECHA_SINTOMAS)>Actividad),]
#    AuxActivos=AuxActivos[which(AuxActivos$TIPO_PACIENTE==1),]
CargaActivos=CargaRecuperados=CargaDefunciones=CargaConfirmados=CargaNegativos=CargaSospechosos=Confirmados[,1:2]
colnames(CargaConfirmados)[2]=paste("X2020.", substr(list.files(pattern = "*.csv")[i], 3,4), ".", substr(list.files(pattern = "*.csv")[i], 5,6), sep="")
colnames(CargaNegativos)[2]=paste("X2020.", substr(list.files(pattern = "*.csv")[i], 3,4), ".", substr(list.files(pattern = "*.csv")[i], 5,6), sep="")
colnames(CargaSospechosos)[2]=paste("X2020.", substr(list.files(pattern = "*.csv")[i], 3,4), ".", substr(list.files(pattern = "*.csv")[i], 5,6), sep="")
colnames(CargaDefunciones)[2]=paste("X2020.", substr(list.files(pattern = "*.csv")[i], 3,4), ".", substr(list.files(pattern = "*.csv")[i], 5,6), sep="")
colnames(CargaRecuperados)[2]=paste("X2020.", substr(list.files(pattern = "*.csv")[i], 3,4), ".", substr(list.files(pattern = "*.csv")[i], 5,6), sep="")
colnames(CargaActivos)[2]=paste("X2020.", substr(list.files(pattern = "*.csv")[i], 3,4), ".", substr(list.files(pattern = "*.csv")[i], 5,6), sep="")
for (j in 1:32)
{
CargaConfirmados[j, 2]=length(which(AuxConfirmados$ENTIDAD_UM==j))
CargaNegativos[j, 2]=length(which(AuxNegativos$ENTIDAD_UM==j))
CargaSospechosos[j, 2]=length(which(AuxSospechosos$ENTIDAD_UM==j))
CargaDefunciones[j, 2]=length(which(AuxDefunciones$ENTIDAD_UM==j))
CargaRecuperados[j, 2]=length(which(AuxRecuperados$ENTIDAD_UM==j))
CargaActivos[j, 2]=length(which(AuxActivos$ENTIDAD_UM==j))
}
CargaConfirmados=AjustaOrden(CargaConfirmados)
CargaNegativos=AjustaOrden(CargaNegativos)
CargaSospechosos=AjustaOrden(CargaSospechosos)
CargaSospechosos=AjustaOrden(CargaSospechosos)
CargaDefunciones=AjustaOrden(CargaDefunciones)
CargaRecuperados=AjustaOrden(CargaRecuperados)
CargaActivos=AjustaOrden(CargaActivos)
Confirmados=merge(Confirmados, CargaConfirmados)
Negativos=merge(Negativos, CargaNegativos)
Sospechosos=merge(Sospechosos, CargaSospechosos)
Defunciones=merge(Defunciones, CargaDefunciones)
Recuperados=merge(Recuperados, CargaRecuperados)
Activos=merge(Activos, CargaActivos)
}
Negativos=Negativos[,-(2:35)]#
Sospechosos=Sospechosos[,-(2:35)]#
Defunciones=Defunciones[,-(2:35)]#
Recuperados=Recuperados[,-(2:35)]#
Activos=Activos[,-(2:35)]#
unlink("*.zip")
unlink("*.csv")
unlink("covid19_mex-master", recursive=TRUE)
write.csv(x = Confirmados, file = "Confirmados.csv")
write.csv(x = Negativos, file = "Negativos.csv")
write.csv(x = Sospechosos, file = "Sospechosos.csv")
write.csv(x = Defunciones, file = "Defunciones.csv")
write.csv(x = Recuperados, file = "Recuperados.csv")
write.csv(x = Activos, file = "Activos.csv")
### Incrementos
DatosIncrementos<-Confirmados[,-n]
for (i in 2:(n-1))
DatosIncrementos[,i]=Confirmados[,i+1]-Confirmados[,i]
#######Derivada<-Perfiles(DatosIncrementos, FALSE)+theme(legend.position="right")
#ggsave("Derivada.png" ,Derivada)
#Datos=read.csv("aux.csv")[,-1]
#Lectura de información del MAPA
download.file("https://tapiquen-sig.jimdofree.com/app/download/5497303759/Mexico_States.rar?t=1455822276", "States")
system("unrar e States")
Datos2=read.dbf("Mexico_States.dbf")
#Las siguientes 2 lineas ajustan las columnas para
#que la base coincida con el shape
a=order(order(Datos2$NAME))
#a[c(10,13,12,25,9,11)]=a[c(9,10,11,12,13,25)]
a[c(12,25,11)]=a[c(11,12,25)]
source("Funciones.R")
location
source("/home/victor/Documentos/Carrera/Maestría/PaginaPersonal/VictorGarciaDS.github.io/assets/projects/Funciones.R")
source(paste(location, "assets/projects/Funciones.R", sep=""))
source(paste(location, "assets/projects/Funciones.R", sep=""))
### Confirmados
Confirmados=Confirmados[a,-ncol(Confirmados)]
write.dbf(Confirmados,"Mexico_States.dbf")
#Visualización del mapa
ConfirmadosOGR<-readOGR(dsn = location, layer = "Mexico_States")
ConfirmadosOGR@data=Confirmados
n=ncol(Confirmados)
Cantidades=c(100,1000,10000,60000)#Cantidades de la etiqueta
Paleta=MiPaleta(ConfirmadosOGR@data)
PerfilesPNG(Confirmados, "assets/img/confirmados/actuales/", "Confirmados")
MapaConfirmados=MapaDeContagios(ConfirmadosOGR, "assets/img/confirmados/actuales/", "Contagios confirmados de COVID 19")
saveWidget(MapaConfirmados, file = "Confirmados.html", selfcontained = F, title="Confirmados")
###Para las demás variables se cambia la fecha inicial###
PrimeraFechaRegistrada="2020-04-20"#Se suma 1
### Negativos
Negativos=Negativos[a,-ncol(Negativos)]
write.dbf(Negativos,"Mexico_States.dbf")
#Visualización del mapa
NegativosOGR<-readOGR(dsn = location, layer = "Mexico_States")
NegativosOGR@data=Negativos
n=ncol(Negativos)
Cantidades=c(1000,10000,40000,70000)#Cantidades de la etiqueta
Paleta=MiPaleta(NegativosOGR@data)
Paleta=rev(Paleta)
PerfilesPNG(Negativos, "assets/img/negativos/actuales/", "Negativos")
MapaNegativos=MapaDeContagios(NegativosOGR, "assets/img/negativos/actuales/", "Negativos a contagio de COVID 19")
saveWidget(MapaNegativos, file = "Negativos.html", selfcontained = F, title="Negativos")
### Sospechosos
Sospechosos=Sospechosos[a,-ncol(Sospechosos)]
write.dbf(Sospechosos,"Mexico_States.dbf")
#Visualización del mapa
SospechososOGR<-readOGR(dsn = location, layer = "Mexico_States")
SospechososOGR@data=Sospechosos
n=ncol(Sospechosos)
Cantidades=c(100,1000,10000,19000)#Cantidades de la etiqueta
Paleta=MiPaleta(SospechososOGR@data)
PerfilesPNG(Sospechosos, "assets/img/sospechosos/actuales/", "Sospechosos")
MapaSospechosos=MapaDeContagios(SospechososOGR, "assets/img/sospechosos/actuales/", "Sospechosos de contagio de COVID 19")
saveWidget(MapaSospechosos, file = "Sospechosos.html", selfcontained = F, title="Sospechosos")
### Defunciones
Defunciones=Defunciones[a,-ncol(Defunciones)]
write.dbf(Defunciones,"Mexico_States.dbf")
#Visualización del mapa
DefuncionesOGR<-readOGR(dsn = location, layer = "Mexico_States")
DefuncionesOGR@data=Defunciones
n=ncol(Defunciones)
Cantidades=c(100,1000,4000,9000)#Cantidades de la etiqueta
Paleta=MiPaleta(DefuncionesOGR@data)
PerfilesPNG(Defunciones, "assets/img/defunciones/actuales/", "Defunciones")
MapaDefunciones=MapaDeContagios(DefuncionesOGR, "assets/img/defunciones/actuales/", "Defunciones por COVID 19")
saveWidget(MapaDefunciones, file = "Defunciones.html", selfcontained = F, title="Defunciones")
### Recuperados
Recuperados=Recuperados[a,-ncol(Recuperados)]
write.dbf(Recuperados,"Mexico_States.dbf")
#Visualización del mapa
RecuperadosOGR<-readOGR(dsn = location, layer = "Mexico_States")
RecuperadosOGR@data=Recuperados
n=ncol(Recuperados)
Cantidades=c(100,1000,10000,30000)#Cantidades de la etiqueta
Paleta=MiPaleta(RecuperadosOGR@data)
Paleta=rev(Paleta)
PerfilesPNG(Recuperados, "assets/img/recuperados/actuales/", "Recuperados")
MapaRecuperados=MapaDeContagios(RecuperadosOGR, "assets/img/recuperados/actuales/", "Recuperados de COVID 19")
saveWidget(MapaRecuperados, file = "Recuperados.html", selfcontained = F, title="Recuperados")
### Activos
Activos=Activos[a,-ncol(Activos)]
write.dbf(Activos,"Mexico_States.dbf")
#Visualización del mapa
ActivosOGR<-readOGR(dsn = location, layer = "Mexico_States")
ActivosOGR@data=Activos
n=ncol(Activos)
Paleta=MiPaleta(ActivosOGR@data)
Cantidades=c(100,1000,2000,3000)#Cantidades de la etiqueta
PerfilesPNG(Activos, "assets/img/activos/actuales/", "Activos")
MapaActivos=MapaDeContagios(ActivosOGR, "assets/img/activos/actuales/", "Contagios activos de COVID 19")
saveWidget(MapaActivos, file = "Activos.html", selfcontained = F, title="Activos")
